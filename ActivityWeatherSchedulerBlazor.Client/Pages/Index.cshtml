@using ActivityWeatherSchedulerLibraryNETStandard.Models
@using ActivityWeatherSchedulerLibraryNETStandard
@page "/"
@inject HttpClient Http
<!--Weather-->
<h1>Weather</h1>
<div class="form-horizontal">
	<div class="form-group">
		<label for="zipCode" class="col-md-2 control-label">Zip Code:</label>
		<div class="col-md-10 padding-left-right-0">
			<input type="number" bind="@ZipCode" onblur="@GetWeatherForZip" class="form-control" id="zipCode" />
		</div>
	</div>
</div>
@if (forecasts == null)
{
	<p><em>Put in a zip code to get a five day forecast.</em></p>
}
else
{
	<table class="table table table-bordered table-striped">
		<thead>
			<tr>
				<th>Date</th>
				<th>Temp. (C)</th>
				<th>Temp. (F)</th>
				<th>Summary</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var forecast in forecasts)
			{
				<tr>
					<td>@forecast.Time.LocalDateTime.ToShortDateString() - @forecast.Time.LocalDateTime.DayOfWeek</td>
					<td>@forecast.TemperatureC</td>
					<td>@forecast.TemperatureF</td>
					<td>@forecast.Summary</td>
				</tr>
			}
		</tbody>
	</table>
}

<!--Activities-->
<h1>Activities</h1>

<div class="form-horizontal">
	<div class="form-group">
		<label for="inputName" class="col-md-2 control-label">Email:</label>
		<div class="col-md-10 padding-left-right-0">
			<input type="text" onblur="@GetActivities" bind="@Email" class="form-control" placeholder="user@email.com" />
		</div>
	</div>
	<div class="form-group">
		<label for="zipCode" class="col-md-2 control-label">Zip Code:</label>
		<div class="col-md-10 padding-left-right-0">
			<input type="number" bind="@ZipCode" onblur="@GetWeatherForZip" class="form-control" id="zipCode" />
		</div>
	</div>
	<div class="form-group">
		<label for="inputName" class="col-md-2 control-label">Summary:</label>
		<div class="col-md-10 padding-left-right-0">
			<input type="text" bind="@Summary" class="form-control" placeholder="Summary" />
		</div>
	</div>
	<div class="form-group">
		<label for="inputName" class="col-md-2 control-label">Temperature (F°):</label>
		<div class="col-md-10 padding-left-right-0">
			<input type="text" bind="@TemperatureF" class="form-control" />
		</div>
	</div>
	<div class="form-check">
		<input type="checkbox" class="form-check-input" bind="@Above" id="aboveCheck" />
		<label class="form-check-label" for="aboveCheck">Above this Temperature?</label>
	</div>
	<button class="btn btn-primary" onclick="@PostActivity">Add Activity</button>
	<button class="btn btn-primary" onclick="@ScheduleActivities">Schedule Activities</button>
	<button class="btn btn-primary" onclick="@ClearActivities">Clear Activities</button>
</div>

<h2>List of activites for @Email:</h2>

@if (activities == null || activities.Count == 0)
{
	<p><em>No Activities to show for this email.</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Summary</th>
				<th>Zip Code</th>
				<th>Temp. (F°)</th>
				<th>Above or Below</th>
				<th>ics File</th>
				<th>Controls</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var activity in activities)
			{
				<tr>
					<td>@activity.Summary</td>
					<td>@activity.ZipCode</td>
					<td>@activity.TemperatureF</td>

					@if (activity.Above == true)
					{
						<td>Above</td>
					}
					else
					{
						<td>Below</td>
					}

					@if (string.IsNullOrWhiteSpace(activity.CalendarString))
					{
						<td>Conditions not met</td>
					}
					else
					{
						fileName = ICalCreator.FileNameIcalExtensionAppend(activity.Id.ToString());
						<td><DownloadButton Payload="@activity.CalendarString" FileName="@fileName">ics File</DownloadButton></td>
					}

					<td>
						<button class="btn btn-primary" onclick="@(() => { DeleteActivity(activity.Id); })">Delete Activity</button>

						@if (activity.Id == EditId)
						{
							<button class="btn btn-primary" onclick="@(() => { ActivateEdit(0); })">Close Edit</button>
						}
						else
						{
							<button class="btn btn-primary" onclick="@(() => { ActivateEdit(activity.Id); })">Edit</button>
						}
					</td>
				</tr>
				<Collapse IsOpen="activity.Id == EditId">
					<tr>
						<td><input type="text" bind="@EditSummary" class="form-control" /></td>
						<td><input type="number" bind="@EditZipCode" onblur="@GetWeatherForZip" class="form-control" /></td>
						<td><input type="text" bind="@EditTemperatureF" class="form-control" /></td>
						<td><input type="checkbox" class="form-check-input" bind="@EditAbove" /></td>
						<td>ics file</td>
						<td>
							<button class="btn btn-primary" onclick="@(() => { UpdateActivity(activity.Id); })">Save Edit</button>
							<button class="btn btn-primary" onclick="@(() => { ActivateEdit(0); })">Close Edit</button>
						</td>
					</tr>
				</Collapse>
			}
		</tbody>
	</table>
}


@functions {
	// Weather fields

	List<WeatherForecast> forecasts;

	// Activity fields

	List<Activity> activities;
	string Email = string.Empty;
	string Summary = string.Empty;
	decimal TemperatureF = 32;
	bool Above = false;
	string ZipCode { get; set; } = "84103";
	string fileName = string.Empty;

	int EditId { get; set; } = 0;
	string EditSummary = string.Empty;
	decimal EditTemperatureF = 0;
	bool EditAbove = false;
	string EditZipCode { get; set; } = string.Empty;


	//Weather functions

	protected async Task GetWeatherForZip()
	{
		if (Validation.IsFiveDigits(ZipCode))
		{
			forecasts = await Http.GetJsonAsync<List<WeatherForecast>>($"api/WeatherForecast/FiveDayWeatherForecast/{ZipCode}");
			StateHasChanged();
		}
	}

	// Activity functions

	protected async Task GetActivities()
	{
		activities = await Http.GetJsonAsync<List<Activity>>($"api/WeatherForecast/GetActivities/{Email}");
	}

	protected async Task DeleteActivity(int Id)
	{
		await Http.DeleteAsync($"api/WeatherForecast/DeleteActivity/{Id}");
		await GetActivities();
	}

	protected void ActivateEdit(int editId)
	{
		EditId = editId;

		if (editId > 0)
		{
			var activity = activities.FirstOrDefault(activity0 => activity0.Id == editId);
			EditZipCode = activity.ZipCode;
			EditSummary = activity.Summary;
			EditTemperatureF = activity.TemperatureF;
			EditAbove = activity.Above;
		}

		StateHasChanged();
	}

	protected async Task UpdateActivity(int Id)
	{
		if (Validation.IsEmail(Email) && Validation.IsFiveDigits(EditZipCode))
		{
			var activity = new Activity
			{
				Id = Id,
				EmailAddress = Email,
				ZipCode = EditZipCode,
				Summary = EditSummary,
				TemperatureF = EditTemperatureF,
				Above = EditAbove,
			};

			await Http.PutJsonAsync<Activity>($"api/WeatherForecast/UpdateActivity", activity);
		}

		ActivateEdit(0);
		await GetActivities();
	}

	protected async Task ClearActivities()
	{
		await Http.DeleteAsync($"api/WeatherForecast/ClearActivities/{Email}");
		await GetActivities();
	}

	protected async Task ScheduleActivities()
	{
		activities = await Http.GetJsonAsync<List<Activity>>($"api/WeatherForecast/ScheduleActivities/{Email}");
	}

	protected async Task PostActivity()
	{
		if (Validation.IsEmail(Email) && Validation.IsFiveDigits(ZipCode))
		{
			var activity = new Activity
			{
				EmailAddress = Email,
				ZipCode = ZipCode,
				Summary = Summary,
				TemperatureF = TemperatureF,
				Above = Above
			};

			await Http.PostJsonAsync<Activity>($"api/WeatherForecast/AddActivity", activity);
			await GetActivities();
		}
	}
}
